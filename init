
;; (add-hook 'tramp-mode-hook
;; 	  '(lambda ()
;; 	     (add-to-list 'tramp-default-proxies-alist
;; 			  '("karleklund\\.se\\'" "\\`root\\'" "/ssh:%h:"))))

; (add-to-list 'tramp-default-proxies-alist '(".*" "\`root\'" "/ssh:%h:"))

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(ecb-options-version "2.40")
 '(ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1))
 '(ecb-source-path (quote (("/" "/") "/home/ke/prj/handelsoasen" "/home/ke/prj/bookbybook" "/home/ke/prj/liv" "/home/ke" "/home/ke/prj")))
 '(ecb-tip-of-the-day nil)
 '(menu-bar-mode nil)
 '(mouse-avoidance-mode nil nil (avoid))
 '(mouse-wheel-progressive-speed nil)
 '(scroll-bar-mode nil)
 '(size-indication-mode t)
 '(tabbar-separator (quote (2)))
 '(tabbar-use-images nil)
 '(tool-bar-mode nil)
 '(tooltip-mode nil)
 '(x-select-enable-clipboard t))

(if (eq (window-system) 'x)
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(default ((t (:stipple nil :background "#102010" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 100 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))
     '(button ((((supports :underline t)) (:background "darkgreen" :foreground "green"))))
     '(cursor ((t (:background "#a0f060"))))
     '(custom-button ((((type x w32 ns) (class color)) (:background "darkgreen" :foreground "green" :box 2))))
     '(custom-button-mouse ((((type x w32 ns) (class color)) (:background "darkgreen" :foreground "green" :box (:line-width 2 :color "grey75")))))
     '(custom-button-pressed ((((type x w32 ns) (class color)) (:inherit nil :box (:line-width 2 :style pressed-button)))))
     '(fringe ((((class color) (background dark)) (:background "#002000" :foreground "darkgreen"))))
     '(mode-line ((((class color) (min-colors 88)) (:background "darkgreen" :foreground "green"))))
     '(tabbar-button ((t (:inherit tabbar-default :background "darkgreen" :foreground "white"))))
     '(tabbar-default ((((class color grayscale) (background dark)) (:inherit variable-pitch :background "#107010" :foreground "#90f090" :height 0.9 :family "monospace"))))
     '(tabbar-selected ((t (:inherit tabbar-default :background "#309030" :foreground "lightgreen"))))
     '(tabbar-separator ((t (:inherit tabbar-default :height 10 :width extra-expanded))))
     '(tabbar-unselected ((t (:inherit tabbar-default))))
     '(tool-bar ((default (:foreground "black")) (((type x w32 ns) (class color)) (:background "grey75"))))
     '(widget-button ((t (:weight bold))))))

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:stipple nil :background "#102010" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 100 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))
 '(button ((((supports :underline t)) (:background "darkgreen" :foreground "green"))))
 '(cursor ((t (:background "#a0f060"))))
 '(custom-button ((((type x w32 ns) (class color)) (:background "darkgreen" :foreground "green" :box 2))))
 '(custom-button-mouse ((((type x w32 ns) (class color)) (:background "darkgreen" :foreground "green" :box (:line-width 2 :color "grey75")))))
 '(custom-button-pressed ((((type x w32 ns) (class color)) (:inherit nil :box (:line-width 2 :style pressed-button)))))
 '(fringe ((((class color) (background dark)) (:background "#002000" :foreground "darkgreen"))))
 '(mode-line ((((class color) (min-colors 88)) (:background "darkgreen" :foreground "green"))))
 '(tabbar-button ((t (:inherit tabbar-default :background "darkgreen" :foreground "white"))))
 '(tabbar-default ((((class color grayscale) (background dark)) (:inherit variable-pitch :background "#107010" :foreground "#90f090" :height 0.9 :family "monospace"))))
 '(tabbar-selected ((t (:inherit tabbar-default :background "#309030" :foreground "lightgreen"))))
 '(tabbar-separator ((t (:inherit tabbar-default :height 10 :width extra-expanded))))
 '(tabbar-unselected ((t (:inherit tabbar-default))))
 '(tool-bar ((default (:foreground "black")) (((type x w32 ns) (class color)) (:background "grey75"))))
 '(widget-button ((t (:weight bold)))))



; http://www.emacswiki.org/emacs/SudoSave
(add-to-list 'load-path "~/.emacs.d/vendor")
(require 'sudo-save)

(add-to-list 'load-path "~/.emacs.d/vendor/textmate.el")
(require 'textmate)
(textmate-mode)


;;; This was installed by package-install.el.
;;; This provides support for the package system and
;;; interfacing with ELPA, the package archive.
;;; Move this code earlier if you want to reference
;;; packages in your .emacs.
(when
    (load
     (expand-file-name "~/.emacs.d/elpa/package.el"))
  (package-initialize))

(setq inhibit-splash-screen t)

(tabbar-mode 1)

(global-set-key [(meta left)] 'tabbar-backward)
(global-set-key [(meta right)] 'tabbar-forward)
(global-set-key [(meta up)] 'tabbar-backward-group)
(global-set-key [(meta down)] 'tabbar-forward-group)

(global-set-key [(super ,)] 'tabbar-backward)
(global-set-key [(super .)] 'tabbar-forward)
(global-set-key [(super \;)] 'tabbar-backward-group)
(global-set-key [(super :)] 'tabbar-forward-group)

(global-set-key [(super s)] 'save-buffer)
(global-set-key [(super c)] 'clipboard-kill-ring-save)
(global-set-key [(super x)] 'clipboard-kill-region)
(global-set-key [(super v)] 'clipboard-yank)
(global-set-key [(super z)] 'undo)

(global-set-key "§" 'other-window)

;; (global-set-key [(super y)] 'ido-switch-buffer)

(global-set-key [f9] 'ecb-toggle-ecb-windows)
(global-set-key [(shift f9)] 'ecb-activate)
(global-set-key [f8] 'magit-status)
(global-set-key [f11] 'textmate-goto-file)
(global-set-key [f12] 'ido-switch-buffer)
(global-set-key [(super -)] 'tabbar-press-home)
(global-set-key [(super _)] 'tabbar-press-home)



;; (define-key map [(meta return)] 'textmate-next-line)
;; (define-key map [(control c)(control t)] 'textmate-clear-cache)
;; (define-key map [(control c)(control a)] 'align)
;; (define-key map [(control tab)] 'textmate-shift-right)
;; (define-key map [(control meta tab)] 'textmate-shift-left)
;; (define-key map [(control c)(control k)] 'comment-or-uncomment-region-or-line)
;; (define-key map [(meta t)] 'textmate-goto-file)
;; (define-key map [(meta shift l)] 'textmate-select-line)
;; (define-key map [(meta shift t)] 'textmate-goto-symbol)
;; (define-key map [(alt up)] 'textmate-column-up)
;; (define-key map [(alt down)] 'textmate-column-down)
;; (define-key map [(alt shift up)] 'textmate-column-up-with-select)
;; (define-key map [(alt shift down)] 'textmate-column-down-with-select)))

(setq auto-mode-alist (cons '("\\.inc$" . php-mode) auto-mode-alist))




(setq tramp-default-proxies-alist
      '(("karleklund\\.se\\'" "\\`root\\'" "/ssh:%h:")))


; http://www.emacswiki.org/emacs/TabBarMode
;; (defun tabbar-buffer-groups ()
;;   "Return the list of group names the current buffer belongs to.
;; This function is a custom function for tabbar-mode's tabbar-buffer-groups.
;; This function group all buffers into 3 groups:
;; Those Dired, those user buffer, and those emacs buffer.
;; Emacs buffer are those starting with “*”."
;;   (list
;;    (cond
;;     ((string-equal "*" (substring (buffer-name) 0 1))
;;      '("Emacs Buffer")
;;      )
;;     ((eq major-mode 'dired-mode)
;;      '("Dired")
;;      )
;;     (t
;;      '("User Buffer")
;;      )
;;     ))) ;; from Xah Lee
;; (setq tabbar-buffer-groups-function 'tabbar-buffer-groups)




;; Load CEDET.
;; See cedet/common/cedet.info for configuration details.
(load-file "~/.emacs.d/vendor/cedet-1.0/common/cedet.el")


;; Enable EDE (Project Management) features
(global-ede-mode 1)

;; Enable EDE for a pre-existing C++ project
;; (ede-cpp-root-project "NAME" :file "~/myproject/Makefile")


;; Enabling Semantic (code-parsing, smart completion) features
;; Select one of the following:

;; * This enables the database and idle reparse engines
(semantic-load-enable-minimum-features)

;; * This enables some tools useful for coding, such as summary mode
;;   imenu support, and the semantic navigator
(semantic-load-enable-code-helpers)

;; * This enables even more coding tools such as intellisense mode
;;   decoration mode, and stickyfunc mode (plus regular code helpers)
;; (semantic-load-enable-gaudy-code-helpers)

;; * This enables the use of Exuberent ctags if you have it installed.
;;   If you use C++ templates or boost, you should NOT enable it.
;; (semantic-load-enable-all-exuberent-ctags-support)
;;   Or, use one of these two types of support.
;;   Add support for new languges only via ctags.
;; (semantic-load-enable-primary-exuberent-ctags-support)
;;   Add support for using ctags as a backup parser.
;; (semantic-load-enable-secondary-exuberent-ctags-support)

;; Enable SRecode (Template management) minor-mode.
;; (global-srecode-minor-mode 1)

(add-to-list 'load-path
	     "~/.emacs.d/vendor/ecb")
(require 'ecb)


